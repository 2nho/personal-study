일반적으로 spring의 컨트롤에서 return 값을 지정시 foward나 redirect 없이 retun "viewUrl" 하게 되면 기본적으로 포워드 방식으로 실행된다고 설명하는 글들이 대다수다.

자바만을 이용해서 컨트롤러에서 코드를 작성시 
RequestDispatcher dispatcher = request.getRequestDispatcher("/hello");
           dispatcher.forward(request, response); 의 형태가 기본형태이기에 나 역시도 큰 의문을 가지지 않았다. 
           
           그러나 최근 프로젝트를 하며 이전 페이지의 입력 값을 다음 페이지에서 가져가기 위해 redirect 대신 foward 방식을 택하면서 문제가 발생했다.
         
  // 이동 할 페이지 

	@RequestMapping("testA.do")

	public String 테스트용1(Model model, HttpServletRequest request) throws Exception {
		System.out.println("출력");

        return "testA";

	}

	// 초기 페이지 

	@RequestMapping("testB.do")

	public String 테스트용2(HttpServletRequest request, VisitorSubcriptionVO vo, Authentication auth) throws Exception {
		

			return foward:testA;  //  System.out.println("출력") sysout으로 찍힘

			return "testA";	   //  안찍힘

	}

이처럼 foward를 앞에 적어주어야만 해당 컨트롤러를 타는 것이였는데 foward를 안적고  return "testA"; 처럼 작성 시 그냥 해당 jsp를 찾아 view로 전달해주는 것이었다.
이유를 찾기위해 많은 검색을 해봤지만 많은 사람들이 기본적으로 포워딩 방식이라고만 할 뿐 차이점을 말하는 사람은 없었다.

그래서 스프링 공식 깃허브에서 소스를 찾아봤는데

https://github.com/spring-projects/spring-framework/blob/main/spring-webmvc/src/main/java/org/springframework/web/servlet/view/UrlBasedViewResolver.java





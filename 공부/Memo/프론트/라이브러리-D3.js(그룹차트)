
  let Swatche =  Swatches(d3.scaleOrdinal(uniqueArr, d3.schemeTableau10));
        	 const index_chart = document.getElementById("index");
        	 index_chart.appendChild(Swatche);
            
            const chart = GroupedBarChart(result, {
//                x: d => d.oper_day,
//                y: d => d.member,
//                z: d => d.oper_day,

                xDomain: result.oper_day,
                yLabel: "기간별 통계",
                zDomain: result.map(d=>d.object),
                colors: d3.schemeTableau10,
                width: 1200,
                height: 300
            });
 // 범례    
 function Swatches(color, {
        		   columns = null,
        		   format,
        		   unknown: formatUnknown,
        		   swatchSize = 15,
        		   swatchWidth = swatchSize,
        		   swatchHeight = swatchSize,
        		   marginLeft = 0
        		 } = {}) {
        		   const id = `-swatches-${Math.random().toString(16).slice(2)}`;
        		   const unknown = formatUnknown == null ? undefined : color.unknown();
        		   const unknowns = unknown == null || unknown === d3.scaleImplicit ? [] : [unknown];
        		   const domain = color.domain().concat(unknowns);
        		   if (format === undefined) format = x => x === unknown ? formatUnknown : x;

        		   function entity(character) {
        		     return `&#${character.charCodeAt(0).toString()};`;
        		   }

        		   if (columns !== null) return htl.html`<div style="display: flex; align-items: center; margin-left: ${+marginLeft}px; min-height: 33px; font: 10px sans-serif;">
        		   <style>

        		 .${id}-item {
        		   break-inside: avoid;
        		   display: flex;
        		   align-items: center;
        		   padding-bottom: 1px;
        		 }

        		 .${id}-label {
        		   white-space: nowrap;
        		   overflow: hidden;
        		   text-overflow: ellipsis;
        		   max-width: calc(100% - ${+swatchWidth}px - 0.5em);
        		 }

        		 .${id}-swatch {
        		   width: ${+swatchWidth}px;
        		   height: ${+swatchHeight}px;
        		   margin: 0 0.5em 0 0;
        		 }

        		   </style>
        		   <div style=${{width: "100%", columns}}>${domain.map(value => {
        		     const label = `${format(value)}`;
        		     return htl.html`<div class=${id}-item>
        		       <div class=${id}-swatch style=${{background: color(value)}}></div>
        		       <div class=${id}-label title=${label}>${label}</div>
        		     </div>`;
        		   })}
        		   </div>
        		 </div>`;

        		   return htl.html`<div style="display: flex; align-items: center; min-height: 33px; margin-left: ${+marginLeft}px; font: 10px sans-serif;">
        		   <style>

        		 .${id} {
        		   display: inline-flex;
        		   align-items: center;
        		   margin-right: 1em;
        		 }

        		 .${id}::before {
        		   content: "";
        		   width: ${+swatchWidth}px;
        		   height: ${+swatchHeight}px;
        		   margin-right: 0.5em;
        		   background: var(--color);
        		 }

        		   </style>
        		   <div>${domain.map(value => htl.html`<span class="${id}" style="--color: ${color(value)}">${format(value)}</span>`)}</div>`;
        		 };
     
            // chart div
            const chartContainer = document.getElementById("chart");
            chartContainer.appendChild(chart);
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
-----------------------------------------기존 범례 생성 (리트머스지 같아서.. 교체)
        const svg = d3.select("#index")
//                  .append("svg")
//                  .attr("width", 550)
//                  .attr("height", 80)
//                  .append("g")
//                  .attr("transform", "translate(0,0) ");
//    
//      const colors = d3.schemeSpectral[10];
//      
      
     
      /*const legend = svg => {
          const g = svg
              .attr("transform", `translate(10,10)`)
              .append("g")
              .attr("transform", `translate(0,0)  rotate(-90)`)
              .attr("text-anchor", "middle")
              .attr("font-family", "sans-serif")
              .attr("font-size", 10)
              .selectAll("g")
              .data(uniqueArr)
              .join("g")
              .attr("transform", (d, i) => `translate(0,${i * 52})`);

          g.append("rect")
              .attr("x", -15) // - 아래로 + 위로 
              .attr("y", 0)
              .attr("width", 15)
              .attr("height", 50)
              .attr("transform", (d, i) => `translate(0, ${i * 0} ) `)
              .attr("fill", (d, i) => colors[i]);
    
          g.append("text")
              .attr("x", 35)
              .attr("y", 0)
              .attr("transform", (d, i) => `translate(-30, 26 ) rotate(90)`) // x 위아래(위 + 아래 -) , y 좌우 (왼쪽 - 오른쪽 +)
              // translate(-30, 25 ) 텍스트 정중앙 기준으로 잡기때문에 50의 반 25
              .attr("dy", "1em")
              .text(d => d);
          
          
      };
      
      legend(svg);*/

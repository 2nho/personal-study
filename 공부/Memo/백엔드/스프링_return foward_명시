일반적으로 spring의 컨트롤에서 return 값을 지정시 foward나 redirect 없이 retun "지정할 view값" 하게 되면 기본적으로 포워드 방식으로 실행된다고만 설명하는 글들이 대다수다.

자바만을 이용해서 컨트롤러에서 코드를 작성시 
RequestDispatcher dispatcher = request.getRequestDispatcher("/hello");
           dispatcher.forward(request, response); 의 형태가 기본형태이기에 나 역시도 큰 의문을 가지지 않았다. 
           
           그러나 최근 프로젝트를 하며 이전 페이지의 입력 값을 다음 페이지에서 가져가기 위해 redirect 대신 foward 방식을 택하면서 문제가 발생했다.
         
  // 이동 할 페이지 

	@RequestMapping("testA.do")

	public String 테스트용1(Model model, HttpServletRequest request) throws Exception {
		System.out.println("출력");

        return "testA";

	}

	// 초기 페이지 

	@RequestMapping("testB.do")

	public String 테스트용2(HttpServletRequest request, VisitorSubcriptionVO vo, Authentication auth) throws Exception {
		

			return foward:testA;  //  System.out.println("출력") sysout으로 찍힘

			return "testA";	   //  안찍힘

	}

이처럼 foward를 앞에 적어주어야만 해당 컨트롤러를 타는 것이였는데 foward를 안적고  return "testA"; 처럼 작성 시 그냥 해당 jsp를 찾아 view로 전달해주는 것이었다.
이유를 찾기위해 많은 검색을 해봤지만 많은 사람들이 기본적으로 포워딩 방식이라고만 할 뿐 차이점을 말하는 사람은 없었다.

그래서 스프링 공식 깃허브에서 소스를 찾아봤는데

https://github.com/spring-projects/spring-framework/blob/main/spring-webmvc/src/main/java/org/springframework/web/servlet/view/UrlBasedViewResolver.java

<p>As a special feature, redirect URLs can be specified via the "redirect:"
 * prefix. E.g.: "redirect:myAction" will trigger a redirect to the given
 * URL, rather than resolution as standard view name. This is typically used
 * for redirecting to a controller URL after finishing a form workflow.
 *
 * <p>Furthermore, forward URLs can be specified via the "forward:" prefix.
 * E.g.: "forward:myAction" will trigger a forward to the given URL, rather than
 * resolution as standard view name. This is typically used for controller URLs;
 * it is not supposed to be used for JSP URLs - use logical view names there.          <---  이부분에서  foward:를 명시해주면 컨트롤러의 URL을 탄다는 것을 알았다.
 
 
 소스에서도 확인할 수 있는데 
 @Override
	protected View createView(String viewName, Locale locale) throws Exception {
		// If this resolver is not supposed to handle the given view,
		// return null to pass on to the next resolver in the chain.
		if (!canHandle(viewName, locale)) {
			return null;
		}

		// Check for special "redirect:" prefix.
		if (viewName.startsWith(REDIRECT_URL_PREFIX)) {
			String redirectUrl = viewName.substring(REDIRECT_URL_PREFIX.length());
			RedirectView view = new RedirectView(redirectUrl,
					isRedirectContextRelative(), isRedirectHttp10Compatible());
			String[] hosts = getRedirectHosts();
			if (hosts != null) {
				view.setHosts(hosts);
			}
			return applyLifecycleMethods(REDIRECT_URL_PREFIX, view);
		}

		// Check for special "forward:" prefix.
		if (viewName.startsWith(FORWARD_URL_PREFIX)) {   // foward: 로 viewname이 시작하면
			String forwardUrl = viewName.substring(FORWARD_URL_PREFIX.length()); // foward:을 제외한 뒷 URL
			InternalResourceView view = new InternalResourceView(forwardUrl);  // InternalResourceView : RequestDispatcher의 forward(), include()를 이용하는 뷰
			return applyLifecycleMethods(FORWARD_URL_PREFIX, view);
		}

		// Else fall back to superclass implementation: calling loadView.
		return super.createView(viewName, locale);
	}
	
	
	
	protected View applyLifecycleMethods(String viewName, AbstractUrlBasedView view) {
		ApplicationContext context = getApplicationContext();
		if (context != null) {
			Object initialized = context.getAutowireCapableBeanFactory().initializeBean(view, viewName);
			if (initialized instanceof View) {
				return (View) initialized;
			}
		}
		return view;
	}

 이처럼 foward: 를 명시해주게 되면 createView 메소드를 타는 것을 확인할 수 있다. 

결론 : 스프링은 foward방식을 이용하려면 명시해줘야 한다. 명시안해주고 return 만 작성 시 해당 view만 찾아서 반환 foward: 명시 할 경우 해당하는 컨트롤의 URL을 탄다!

추가 + https://www.logicbig.com/tutorials/spring-framework/spring-web-mvc/forward-prefix.html 


Like 'redirect:' prefix , Spring also allows to use special directive 'forward:' to return forwarded url as String.

On encountering this special prefix in the return value of a controller, Spring uses javax.servlet.RequestDispatcher#forward to forward a request from one controller to another .

Forwarding a URL transfers the request internally within the same server without involving the client browser, that means in the browser the original request URL remains same and there's only one round trip instead of two (which is the case of redirect).


The following example demonstrates the use of 'forward:'




22-11-01 추가 
https://okky.kr/articles/635112 
제타 건담님의 댓글 

페이지를 이동하는 것은 forward와 redirect가 있는데..

forward의 경우는 기존 request를 그대로 이용할 수 있지만 redirect의 경우는 클라이언트를 한번 갔다가 다시 해당 url로 이동하는 것이기 때문에 기존 request를 이용할 수 없습니다..

그리고 return에 jsp 경로를 입력하는 것은 그냥 단순 호출이지 forward와는 다른거에요..

spring의 경우는 forward일 경우 forward:/경로..를 입력하게 되고..

redirect일 경우 redirect:/경로..를 입력하게 되는데..

forward로 입력할 경우 해당 경로를 처리하는 controller 메소드로 다시 이동하게 되어서 거기서 return 하는 jsp 경로로 return 하게 됩니다..

그러나 client에서 url이 변경되어가며 하는 이동은 아니기 때문에 브라우저의 url 입력창에는 기존 url이 그대로 나오는거구요..

redirect일 경우 response header에 redirect 할 경로가 들어가서 클라이언트인 브라우저에 일단 전달되었다가 다시 클라이언트인 브라우저에서의 자동 호출이 이루어지기 때문에 url 입력창의 url 경로 값이 redirect된 url로 바뀌게 나옵니다..

화면으로 봤을 경우 외형적인 차이는 없을수는 있으나 내부적인 동작에서는 분명 차이가 있죠..

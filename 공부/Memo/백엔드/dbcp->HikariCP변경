강원랜드 카지노 쪽 10g 오라클 버전과 맞추기 위해 
4.0.3버전 채택
<dependency>
	<groupId>com.zaxxer</groupId>
	<artifactId>HikariCP</artifactId>
	<version>4.0.3</version>
</dependency>



  [기존 datasource] 

   <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${db.classname}" />
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<property name="validationQuery" value="SELECT 1 FROM DUAL" /> // DB Pool이 생성이 되더라고 특정 시간 호출되지 않으면 DBMS 설정에 따라 연결을 끊어질 때 이 경우 DBCP를 
			                                                             // 연결을 유지  	특정시간 마다 validationQuery 실행 셋팅
		<property name="testWhileIdle" value="true" />
		<property name="timeBetweenEvictionRunsMillis"
			value="7200000" /> 7200000/2시간 , 60000 / 1분
		<property name="defaultAutoCommit" value="true" />
		<property name="maxWait" value="5" /> 30초
    </bean>


 [수정 datasource]
  <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource">
    <property name="driverClassName" value="${db.classname}" />
    <property name="jdbcUrl" value="${db.url}" />
    <property name="username" value="${db.username}" />
    <property name="password" value="${db.password}" />
    
    <!-- HikariCP 설정 -->
    <property name="maximumPoolSize" value="10" />
    <property name="minimumIdle" value="5" />
    <property name="connectionTimeout" value="5000" /> <!-- 5초 성능을 위해 짧게 유지 오라클 RAC => ADDRESS_LIST에 따라 커넥션 타임 아웃 후 다른 db로 요청 --> 
    <property name="idleTimeout" value="600000" /> <!-- 10분 -->
    <property name="maxLifetime" value="1800000" /> <!-- 30분 -->
    <property name="connectionTestQuery" value="SELECT 1 FROM DUAL" />
</bean>

# TNS 방식 - 오라클 클러스터 및 장애처리 접속 방법 (디폴트 값 LOAD_BALANCE = off , FAILOVER = on )
db.url = jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.12.1.1)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=127.0.0.1)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=orcl)))

# direct 방식 SID 
jdbc:oracle:thin:@127.0.0.1:1521:ORCL

# direct 방식 SERVICE NAME 
jdbc:oracle:thin:@127.0.0.1:1521/ORCL    (SERVICE NAME이 범위가 더 넓음)



## DESCRIPTION_LIST 설정
net_service_name =
 (DESCRIPTION_LIST =
  (DESCRIPTION =
   (ADDRESS = (PROTOCOL = TCP)(HOST = host1.example.com)(PORT = 1521))
   (CONNECT_DATA = (SERVICE_NAME = service1)))
  (DESCRIPTION =
   (ADDRESS = (PROTOCOL = TCP)(HOST = host2.example.com)(PORT = 1521))
   (CONNECT_DATA = (SERVICE_NAME = service1))))

 첫 번째 DESCRIPTION 블록 (host1.example.com)으로 연결을 시도하고, 실패하면 두 번째 DESCRIPTION 블록 (host2.example.com)으로 시도 

## ADDRESS_LIST 설정
net_service_name =
 (DESCRIPTION =
  (ADDRESS_LIST =
   (LOAD_BALANCE = off)
    (FAILOVER = on)
   (ADDRESS = (PROTOCOL = TCP)(HOST = host1.example.com)(PORT = 1521))
   (ADDRESS = (PROTOCOL = TCP)(HOST = host2.example.com)(PORT = 1521)))
  (CONNECT_DATA =
   (SERVICE_NAME = service1)))

첫 번째 주소 (host1.example.com)으로 연결을 시도하고, 실패하면 두 번째 주소 (host2.example.com)으로 시도 


### 결과 
DESCRIPTION_LIST, ADDRESS_LIST 위 두가지 방식은 첫번째를 실패하면 두번째 주소로 시도한다느 점에서 같아짐 

하지만 but!
net_service_name =
 (DESCRIPTION_LIST =
  (DESCRIPTION =
   (ADDRESS = (PROTOCOL = TCP)(HOST = host1.example.com)(PORT = 1521))
   (CONNECT_DATA = (SERVICE_NAME = service1)))
  (DESCRIPTION =
   (ADDRESS = (PROTOCOL = TCP)(HOST = host2.example.com)(PORT = 1521))
   (CONNECT_DATA = (SERVICE_NAME = service2))))

이렇게 SERVICE_NAME의 값이 다르다면 동작방식이 전혀 다름 

부하 분산이 비활성화된 상태에서 두 설정의 동작 방식은 거의 동일
그러나 실제 환경에서의 설정 복잡성, 부하 분산 활성화 여부, 그리고 구체적인 연결 설정에 따라 동작 방식에 차이가 있음

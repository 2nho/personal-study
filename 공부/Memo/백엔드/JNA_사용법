-리눅스-
JNA로 호출할 메소드에 extern "C" __attribute__((visibility("default"))) 필수 
=> 맹글링 방지 (cpp는 컴파일러가 함수이름을 자기편한대로 바꾸버리니 자바에서 사용하려면 기존 함수명을 그대로 유지해야함 )


-윈도우-
extern "C" __declspec(dllexport) 


자바 String   == C++ const char*




간단 예) 
extern "C" const char* example() {    // extern "C" 이렇게 길게 치기 싫으면 매크로 사용  ex) #define exC extern "C" __declspec(dllexport)
  static char dest[10];
  char source[] = "Hello";
  strcpy(dest, source);
  return dest;
}




ex) extern "C" const char* getFirstHddSerialNumber() {
    static char result[128]; // 자바에서 이용하기 위해 static으로 설정 buffer를 그대로 이용하려하면 지역변수라 이미 메모리에서 사라져서 사용이 불가능
    const char* cmd = "lsblk -n -o SERIAL /dev/sda";  
    char buffer[128];
    FILE* pipe = popen(cmd, "r");  // 쉘에 cmd의 명령어를 실행 후 pipe에 그 결과값이 담김 
    if (!pipe) {
        return "-1";
    } 
    if (fgets(buffer, sizeof(buffer), pipe) != NULL) { // 첫째줄 부터 가져옴 while문을 통하면 전체가져올수 있지만 이 경우 첫째줄만 필요
        strcpy(result, buffer); // buffer값을 result에 복사
        pclose(pipe);
        return result;
    }
    pclose(pipe);
    return "-2";
}



자바에서 사용에서 so , dll 호출 


import com.sun.jna.Library; // Linux용
import com.sun.jna.Native;
import com.sun.jna.Pointer; // 포인터 받을 경우 사용 
import com.sun.jna.win32.StdCallLibrary;  // Windows용

public class exLibService {
	public interface exLib extends Library{ // 윈도우의 경우 extends StdCallLibrary
		String libPath = "example.so"; // windows의 경우 확장자 dll => example.dll 
		exLib INSTANCE =  Native.load(libPath, exLib.class);
		public String getFirstHddSerialNumber(); //extern c 로 설정한 함수만 호출가능
	}
}


JNI보다 간편하게 C함수를 사용할 수 있어 JNA를 택했다. C언어에 익숙하지 않은 내가 C개발자와 협업하기 위해선 
JNA가 개발속도가 제일 빠를거라 생각했기에 선택.



<지속적인 오류> 
함수에서 다른 함수호출 할 때 JNA가 오류가 남

-원인파악-
원 함수와 피 함수 두 함수명의 합이 30이하여야함 30초과시 바로오류남 (노가다의 결실)
int Cvca_able_red(){ //13글자
	return 543;
}

int qein_tunanu_afcff() { //17글자
	return Cvca_able_red ();
}

-- 다음날 하니 또 오류 구현 재현안됨.. 30자넘어도 잘되고 
extern c가 함수 둘다에 안붙었을때만 그런거같음

extern c가 붙은경우 40자 제한
++

확실한 원인 !!

원인은 MobaXterm에서 다운로드시 심볼릭 링크(소프트 링크)가 원본파일의 내용을 가져오게 되는데 
이때 끝부분이 "누락"되어서 elf end of command오류가 났던것 (원본파일보다 크기가 조금 더작음 내용을 확인해보면 누락된것을 알 수가 있음)

가. 이전까지 동적라이브러리 파일 원본이 아닌 심볼릭 링크를 다운로드해서 사용했던 것
나. 운좋게도 심볼릭 링크가 다운받을 시 원본파일의 내용을 끝부분만 빼고 잘가져왔던 것
위 두가지가 맞물려 어떨땐 되고 어떨땐 안되고 했던거 같다.

심볼릭 링크(소프트 링크)는 copy 등이 일어날때 원본파일의 내용을 그대로 가져오게 된다. (단. MobaXterm에서 다운로드시에는 누락되어서 가져)
1. cp 명령어로 복사 시 
   기존 18~20kb 사이즈에서 원본과 동일한 파일크기로 바뀜 내용도 같음
2. scp명령어로 파일을 복사해오는 경우 
   명령어) scp -r /원격/디렉토리/경로/ 로컬사용자명@로컬호스트주소:/로컬/디렉토리/경로/  
   심볼릭 링크는 원본파일의 내용과 크기를 그대로 이어받음.
   단 MobaXterm 처럼 파일 내용이 누락되진 않음
3. zip으로 압축 시 심볼릭 링크들이 원본파일 동일한 파일크기와 내용으로 바뀌어 압축됨


해결방안 
1. rsync를 사용!
   명령어) rsync -avz user@example.com:/원격/심볼릭/링크/경로/ 로컬/저장/디렉토리/
2. ln -s 커맨드를 이용해 심볼릭 링크를 직접 생성  



MobaXterm gui를 이용해서 다운시에는 왜 누락되는지 정확히 모르겠다..




스프링 시큐리티의 인증 정보 관리: Session, SecurityContextHolder, SecurityContext, ThreadLocal
핵심 컴포넌트 개요
1. SecurityContext
역할: 인증된 사용자의 Authentication 객체를 담는 컨테이너

구조: Authentication getAuthentication(), setAuthentication(Authentication) 메서드 제공

특징: Authentication 객체를 래핑하여 보안 컨텍스트 확장성 제공

2. SecurityContextHolder
역할: SecurityContext에 접근하는 정적 유틸리티 클래스

저장 방식: ThreadLocal 기반으로 SecurityContext 저장 (기본 전략)

주요 메서드:

getContext(): 현재 쓰레드의 SecurityContext 반환

setContext(SecurityContext): 현재 쓰레드에 SecurityContext 설정

clearContext(): 현재 쓰레드의 SecurityContext 제거

3. ThreadLocal
역할: 각 쓰레드마다 독립적인 변수 저장 공간 제공

특징:

쓰레드별로 격리된 저장소 제공

동일 쓰레드 내에서는 어디서든 접근 가능

다른 쓰레드의 값에 영향을 주지 않음

4. HttpSession
역할: 여러 요청에 걸쳐 사용자 상태 유지

특징:

서버에 저장되며 세션 ID로 식별

사용자별로 독립적인 저장소 제공

브라우저 쿠키(JSESSIONID)를 통해 세션 ID 전달

참고 : https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html

[Setting SecurityContextHolde]

SecurityContext context = SecurityContextHolder.createEmptyContext(); 
Authentication authentication =
    new TestingAuthenticationToken("username", "password", "ROLE_USER"); 
context.setAuthentication(authentication);

SecurityContextHolder.setContext(context); 

[Access Currently Authenticated User]

SecurityContext context = SecurityContextHolder.getContext();
Authentication authentication = context.getAuthentication();
String username = authentication.getName();
Object principal = authentication.getPrincipal();
Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();

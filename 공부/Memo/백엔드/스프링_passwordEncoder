주석의 경우 SHA1 버전 

보안상 SHA-256이 필요하기 때문에 코드 수정   



package guardian.common.config;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import org.springframework.security.crypto.password.PasswordEncoder;

public class MySqlPasswordEncoder implements PasswordEncoder {

  private static MessageDigest DIGEST = null;

  {
    try {
      //DIGEST = MessageDigest.getInstance("SHA1");
      DIGEST = MessageDigest.getInstance("SHA-256"); // SHA-256으로 변경
      
    } catch (NoSuchAlgorithmException e) {
      e.printStackTrace();
    }
  }

  @Override
  public String encode(CharSequence rawPassword) {
    if (rawPassword == null) {
      throw new IllegalArgumentException("rawPassword cannot be null");
    }

    return toString(hashing(getBytes(rawPassword)));
  }

  private byte[] getBytes(CharSequence rowPassword) {
    byte[] result = new byte[rowPassword.length()];

    for (int i = 0; i < rowPassword.length(); i++) {
      result[i] = (byte) (rowPassword.charAt(i) & 0xff);
    }

    return result;
  }

  private byte[] hashing(byte[] bytes) {
	//return DIGEST.digest(DIGEST.digest(bytes));  MYSQL의 PASSWORD함수는 두번 SHA1로 암호화
    return DIGEST.digest(bytes);
  }

  private String toString(byte[] bytes) {
    StringBuffer buffer = new StringBuffer(41);
    //buffer.append("*");  MYSQL의 PASSWORD함수는 맨앞에 *표시 그러나 SHA-256에는 필요없음

    for (int i = 0; i < bytes.length; i++) {
      //padding(buffer, Integer.toHexString(bytes[i] & 0xff).toUpperCase()); 
    	padding(buffer, Integer.toHexString(bytes[i] & 0xff)); // 대문자변환 삭제
    }

    return buffer.toString();
  }

  private void padding(StringBuffer buffer, String hex) {
   // if (hex.length() < 2) {
   //   buffer.append("0");
   // }

    buffer.append(hex);
  }

  @Override
  public boolean matches(CharSequence rawPassword, String encodedPassword) {
	  System.out.println(encode(rawPassword));
    if (rawPassword == null || encodedPassword.isEmpty()) {
      return false;
    }

    if (!encodedPassword.equals(encode(rawPassword))) {
      return false;
    }
    
    return true;
  }

}

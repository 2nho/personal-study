data : function(d) {  에서 d 로 받는 데이터들은 어디서 오는가

Description:
As a function, the ajax.data option can be used to modify the data DataTables submits to the server upon an Ajax request, 
by manipulating the original data object DataTables constructs internally, or by replacing it completely.

This provides the ability to submit additional information to the server upon an Ajax request, with the function being executed upon each Ajax request,
allowing values to be dynamically calculated. For example, a value could be read from a text input field to act as an additional search option.
설명:
기능으로서 이 ajax.data옵션은 DataTables가 내부적으로 구성하는 원래 데이터 개체를 조작하거나 완전히 교체하여 Ajax 요청 시 
DataTables가 서버에 제출하는 데이터를 수정하는 데 사용할 수 있습니다.

이것은 Ajax 요청 시 서버에 추가 정보를 제출할 수 있는 기능을 제공하며, 
각 Ajax 요청 시 실행되는 기능을 통해 값을 동적으로 계산할 수 있습니다. 예를 들어, 텍스트 입력 필드에서 값을 읽어 추가 검색 옵션으로 사용할 수 있습니다.

data : serverSide옵션 을 사용하는 경우 여기에는 서버 측 처리 매개변수가 포함됩니다 .


If there is no return value from the function (i.e. undefined) then the original data object passed into the function 
by DataTables will be used for the request (the function may have manipulated its values).

If an object is returned, then that object will be used as the data for the request.
It will not be merged with the original data object constructed by DataTables before being sent.

If a string is returned, this string it will be used in the Ajax request body rather than individual HTTP parameters being sent.
This is particularly useful for sending JSON encoded data in the request body so the server can decode it directly, rather than individual HTTP parameters being sent.
See example below for how to use JSON.stringify() to achieve this.


함수에서 반환 값이 없으면(즉 undefined) DataTables에 의해 함수에 전달된 원래 데이터 개체가 요청에 사용됩니다(함수가 값을 조작했을 수 있음).

객체가 반환되면 해당 객체는 요청에 대한 데이터로 사용됩니다. 전송되기 전에 DataTables에 의해 구성된 원래 데이터 개체와 병합되지 않습니다.

문자열이 반환되면 이 문자열은 전송되는 개별 HTTP 매개변수가 아니라 Ajax 요청 본문에 사용됩니다.
이는 요청 본문에서 JSON 인코딩 데이터를 보내는 데 특히 유용하므로 개별 HTTP 매개변수가 전송되는 대신 서버에서 직접 디코딩할 수 있습니다.




The d represents any pre-existing data to be sent to the server as part of the DataTables Ajax request.

Your data is appended to that data.

Two examples of such "pre-existing data" are:

The timestamp generated by jQuery when cacheing is set to false.

The request data created by DataTables when it is using server-side processing.

/* workspace
 * - 프로그래머가 일을 하기 위한 공간을 의미
 * - 프로그래머가 실제 일을 단위로 분리하여 일을 할 때에도 workspace를 사용한다.
 * - 프로젝트, 패키지, 파일 등이 다 workspace안에 들어가며 프로젝트 단위로 workspace안에 저장되어 있는 경우가 많다.
 * - eclipse 에서의 workspace와 vscode에서의 workspace의 단위는 서로 다르다(vscode에서는 workspace == project 임)
 * project
 * - 업무의 단위이자 한 업무의 영역을 표시하고자 할 경우 쓰는 개념
 * - eclipse의 workspace와 project는 다른 개념이며 보통 workspace 안에 project가 들어가 있는 개념이다.
 * - vscode 에서는 workspace가 곧 project이며 항상 1 workspace == 1 project 를 지향한다.
 * - 따라서 project와 workspace는 무조건 같은 개념이라 볼 수 없으며 일의 단위를 나타낼 때 project를 기준으로 이야기하는 경우가 많다.
 * - project는 어떤 형태의 프로젝트냐에 따라서 다른 환경을 제시하기도 한다.(Maven Project, Dynamic Web Project, Simple Java Project, etc...)
 * package
 * - package는 java 파일을 항목 혹은 기능 단위로 나눠놓기 위한 일종의 문서함이라고 보면 된다.
 * - 어떤 항목 혹은 기능 단위를 통해 카테고리 별로 파일을 묶어 관리할 경우 package를 쓴다.
 * - package는 보통 3 depth 이상 들어가는것을 권장하고 있으며 보안 이슈로 인해 파일이 외부로부터 접근되는걸 방지하기 위함이다.
 * - 분업화된 시스템에서는 패키지를 통해 파일에 대한 관리가 더욱 철저하게 이루어진다.
 * - 만들어진 파일에서는 반드시 파일 맨 위쪽에 해당 파일이 들어있는 패키지를 명시하도록 하고 있다.
 * */
package kr.co.goodee39.date1025;
/* class
 * - Java 코드를 작성할 수 있는 가장 기본적인 단위
 * - Java 코드가 유효할 수 있는 범위를 제공하는 형태
 * - 클래스는 실제 코드가 생존할 수 있는 범위를 제공한다.
 * - 1file = 1class 가 기본 법칙(물론 2클래스를 넣을 수도 있지만 보통은 1file 1class 형태로 작성된다)
 * - 클래스 안에서 모든 객체 지향 프로그래밍이 가능하며 Java는 클래스 단위로 움직인다.
*/
public class Ex01Comment1 {
	/*
	 * public static void main(String[] args)
	 * - 맨 처음 코드를 시작하는 시작 포인트(엔트리 포인트)
	 * - 모든 코드의 동작의 시작은 main에서부터 시작된다.
	 * - 간혹 다른 웹에서는 main에서부터 시작되는 경우가 아닌 케이스가 있는데 이 경우 다른곳에서 main을 지원해주는 경우가 있다.
	 * */
	public static void main(String[] args) {
		/* 브레이스
		 * - Java 프로그래밍은 영역을 지정하여 프로그래밍을 한다.
		 * - 이 영역을 나타내기 위해 {} - 브레이스 라는 기호를 작성한다.
		 * - 브레이스를 통해 여러 영역을 보기 쉽게 나타낼 수 있으며 영역 안의 코드일 경우에는 밖의 영역보다 들여쓰기 하는 것을
		 *   윈칙으로 한다.
		 * - {}를 통해 다른 변수의 생존 범위를 정의하기도 한다.
		 * 세미콜론(;)
		 * - Java 프로그램에서 하나의 명령문이 끝났음을 나타내기 위해 쓰는 기호
		 * - 영역을 나타내는 브레이스 뒤에는 특수한 경우를 제외하면 잘 붙지 않지만 그 외의 경우에는 반드시 세미콜론을 써주어야 하는것을
		 *   윈칙으로 한다.
		 * - 세미콜론을 붙인 상태에서 한 줄에 여러 개의 로직을 붙여 사용해도 크게 상관은 없지만 가독성에 문제가 되므로 이런 사용은 가급적
		 *   자제하는 것이 좋다.
		 * 주석문
		 * - 로직에는 전혀 영향을 미치지 않는 문장, 실제 프로그래머들 끼리의 알림을 목적으로 쓰이는 문장을 의미한다.
		 * - 공동 작업을 할 경우 다른 사람들에게 해당 로직이 무엇인지, 무엇을 해야 하는지에 대한 알림 목적으로 쓸 때 유용하게 사용이 가능하다.
		 * - 단일 주석문 : 한줄만 주석 사용할 경우 사용, 다중 주석문 : 여러줄에 걸쳐서 주석을 사용할 경우 사용
		 * - 주석문은 장소에 관계없이 어디서든 사용이 가능하다.
		 * */
		// 단일 주석문
		/*
		 * 다중 주석문
		 * */
		System.out.println("주석문은 위와 같이 생겼습니다.");
	}

}
